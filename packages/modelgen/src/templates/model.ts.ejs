// Auto-generated , DO NOT EDIT
/* eslint-disable */

import { Sequelize, Model, DataTypes, Optional } from "sequelize";

<% if (props.importJsonInterfaces.length !== 0) { %>
import {<% props.importJsonInterfaces.forEach(function(interface){ %>
  <%= interface %>,<% }); %>
} from '../interfaces';
<% } -%>
<% if (props.importEnums.length !== 0) { %>
import {<% props.importEnums.forEach(function(e){ %>
  <%= e %>,<% }); %>
} from '../enums'
<% } -%>
<% if (props.importModels.length !== 0) { %>
import {<% props.importModels.forEach(function(r){ %>
  <%= r %>,<% }); %>
} from './';
<% } -%>

export interface <%= props.className %>Attributes {
<%_ props.fields.forEach(function(field){ _%>
  <%= field.name %><%= field.required ? "" : "?" %>: <%= field.type %><%= field.isArray ? "[]" : "" %>;
<%_ }); _%>
}

export interface <%= props.className %>CreateAttributes extends Optional<<%= props.className %>Attributes, "<%= props.id %>"> {}

export class <%= props.className %> extends Model<
  <%= props.className %>Attributes,
  <%= props.className %>CreateAttributes
> implements <%= props.className %>Attributes {

<%_ props.fields.forEach(function(field){ _%>
  declare <%= field.name %>: <%= field.type %><%= field.isArray ? "[]" : "" %>;
<%_ }); _%>

  <% if(props.modelOptions.createdAt) { _%>declare readonly createdAt: Date;<% } %>
  <% if(props.modelOptions.updatedAt) { _%>declare readonly updatedAt: Date;<% } %>

  public static bootstrap(sequelize: Sequelize) {
    <%= props.className %>.init(
      {
      <%_ props.fields.forEach(function(field) { _%>
        <%= field.name %>: {
          type: <%- field.sequelize.type %>,
          primaryKey: <%= field.sequelize.primaryKey %>,
          allowNull: <%= field.sequelize.allowNull %>,
          <%_ if(field.sequelize.comment) { _%> comment: `<%= field.sequelize.comment %>` <%} _%>
          <%_ if(field.sequelize.get) { _%> get() { <%= field.sequelize.get %> } <%} _%>
          <%_ if(field.sequelize.get) { _%> set() { <%= field.sequelize.set %> } <%}  _%>
        },
      <%_ }); _%>
      },
      {
        sequelize,
        underscored: <%= props.modelOptions.underscored %>,
        <%_ if(props.modelOptions.comment) { _%> comment: `<%= props.modelOptions.comment %>` <%_ } _%>
        freezeTableName: <%= props.modelOptions.freezeTableName %>,
        createdAt: <%= props.modelOptions.createdAt %>,
        updatedAt: <%= props.modelOptions.updatedAt %>,
        indexes: [
          <%_ props.modelOptions.indexes.forEach(function(index){ _%>
          {
            unique: <%= index.unique %>,
            using: `<%= index.using %>`,
            fields: <%- index.fields %>,
          },
          <%_ }); _%>
        ],
      }
    );
    <%_ if (props.relations.length !== 0) { _%>
    <%_ props.relations.forEach(function(r){ _%>
    <%= props.className %>.<%= r.type %>(<%= r.to %>, { foreignKey: `<%= r.foreignKey %>`<%_ if (r.fieldName) { _%>, as: `<%= r.fieldName %>`<% } %> });
    <%_ }); _%>
    <%_ } _%>
  }
}
